generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model playlist {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  author         String           @db.VarChar(255)
  createTime     DateTime?        @db.Date
  desc           String?          @db.VarChar(255)
  tags           Json?
  isPrivate      String?          @db.VarChar(255)
  img            String?          @db.VarChar(255)
  playlist_songs playlist_songs[]

  @@index([author], map: "name")
}

model songs {
  id             Int              @id @default(autoincrement())
  song_title     String           @db.VarChar(255)
  duration       Int?
  file_path      String           @db.Text
  albums_id      Int
  artists_id     Int
  playlist_songs playlist_songs[]
  albums         albums           @relation(fields: [albums_id], references: [id], onUpdate: Restrict, map: "songs_ibfk_1")
  artists        artists          @relation(fields: [artists_id], references: [id], onUpdate: Restrict, map: "songs_ibfk_2")

  @@index([albums_id], map: "albums_id")
  @@index([artists_id], map: "artist_id")
}

model albums {
  id           Int       @id @default(autoincrement())
  album_title  String    @db.VarChar(255)
  desc         String?   @db.VarChar(2000)
  artist_id    Int?
  release_date DateTime? @db.Date
  cover        String?   @db.Text
  createTime   DateTime? @db.Timestamp(0)
  artists      artists?  @relation(fields: [artist_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "albums_ibfk_1")
  songs        songs[]

  @@index([artist_id], map: "artist_id")
}

model artists {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  biography  String?   @db.Text
  image_url  String?   @db.VarChar(255)
  createTime DateTime? @default(now()) @db.Timestamp(0)
  albums     albums[]
  songs      songs[]
}

model users {
  id        Int       @id @default(autoincrement())
  username  String    @unique(map: "unique_username") @db.VarChar(255)
  password  String    @db.VarChar(255)
  createdAt DateTime? @db.Date
  cover     String?   @db.VarChar(255)
}

model playlist_songs {
  playlist_id Int
  song_id     Int
  playlist    playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "playlist_songs_ibfk_1")
  songs       songs    @relation(fields: [song_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "playlist_songs_ibfk_2")

  @@id([playlist_id, song_id])
  @@index([playlist_id], map: "idx_playlist_songs_playlist_id")
  @@index([song_id], map: "idx_playlist_songs_song_id")
}
